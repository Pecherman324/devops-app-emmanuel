name: CI/CD Pipeline - DevOps App Emmanuel

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: An√°lisis de c√≥digo y calidad
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-cov bandit safety

    - name: An√°lisis de seguridad con Bandit
      run: |
        bandit -r app.py -f json -o bandit-report.json || true
        bandit -r app.py

    - name: An√°lisis de dependencias con Safety
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Linting con Flake8
      run: |
        flake8 app.py --max-line-length=100 --format=json --output-file=flake8-report.json || true
        flake8 app.py --max-line-length=100

    - name: Tests unitarios
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html || true

    - name: Subir reportes de calidad
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: |
          bandit-report.json
          safety-report.json
          flake8-report.json
          coverage.xml
          htmlcov/

  # Job 2: Build y test de Docker
  docker-build:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extraer metadatos
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build y push imagen Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test de imagen Docker
      run: |
        docker run --rm -d -p 5000:5000 --name test-container ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        sleep 10
        curl -f http://localhost:5000/api/health || exit 1
        docker stop test-container

  # Job 3: Deploy a staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Deploy a staging
      run: |
        echo "üöÄ Desplegando a entorno de staging..."
        echo "Imagen: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        # Aqu√≠ ir√≠an los comandos reales de deploy
        # kubectl set image deployment/devops-app devops-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Job 4: Deploy a producci√≥n
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Deploy a producci√≥n
      run: |
        echo "üöÄ Desplegando a producci√≥n..."
        echo "Imagen: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        # Aqu√≠ ir√≠an los comandos reales de deploy
        # kubectl set image deployment/devops-app devops-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Job 5: Notificaciones
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
    - name: Notificar resultado
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "‚úÖ Deploy exitoso"
        else
          echo "‚ùå Deploy fall√≥"
        fi
